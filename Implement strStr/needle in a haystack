public class Solution {
    public int StrStr(string haystack, string needle) {
        {
        if(haystack==null || needle==null)    
            return 0;
 
	int h = haystack.Length;
	int n = needle.Length;
 
	if (n > h)
		return -1;
	if (n == 0)
		return 0;
 
	int[] next = getNext(needle);
	int i = 0;
 
	while (i <= h - n) {
		int success = 1;
		for (int j = 0; j < n; j++) {
			if (needle[0] != haystack[i]) {
				success = 0;
				i++;
				break;
			} else if (needle[j] != haystack[i + j]) {
				success = 0;
				i = i + j - next[j - 1];
				break;
			}
		}
		if (success == 1)
			return i;
	}
 
	return -1;
}
 
//calculate KMP array
  static int[] getNext(string needle) {
	int[] next = new int[needle.Length];
	next[0] = 0;
 
	for (int i = 1; i < needle.Length; i++) {
		int index = next[i - 1];
		while (index > 0 && needle[index] != needle[i])) {
			index = next[index - 1];
		}
 
		if (needle[index] == needle[i]) {
			next[i] = next[i - 1] + 1;
		} else {
			next[i] = 0;
		}
	}
 
	return next;
}
