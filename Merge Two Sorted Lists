/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
 Solution 1:
public class Solution {
    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {

    ListNode res = l1;
    ListNode temp1 = null;
    if(l1 == null)
        return l2;
    else if(l2 == null)
        return l1;
    while (l1 != null && l2 != null)
    {
        if (l1.val <= l2.val && l1.next != null)
        {
            temp1 = l1;
            l1 = l1.next;
        }
        else if (temp1 != null && l1.val > l2.val)
        {
            temp1.next = l2;
            ListNode temp2 = l2.next;
            l2.next = l1;
            temp1 = l2;
            l2 = temp2;
        }
        else if (temp1 == null && l1.val > l2.val)
        {
            ListNode temp2 = l2.next;
            l2.next = l1;
            res = l2;
            temp1 = l2;
            l2 = temp2;
        }
        else
        {
            l1.next = l2;
            break;
        }
    }
    return res;
    }
}

Solution 2:

public class Solution {
    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {
if(l1 == null  && l2 == null)
        return null;
    if(l1 == null )
        return l2;
    if(l2 == null)
        return l1;
   
        if (l1.val < l2.val )
        {
            l1.next = MergeTwoLists(l1.next,l2);
            return l1;
        }
        else 
        {
            l2.next = MergeTwoLists(l1,l2.next);
            return l2;
        }
        
    
    
    }
}
